#include "compression.h"
#include <iostream>
#include <string>
#include <vector>
#include <cstring>

// Helper function to recursively compress blocks
void Compcrypt::recursiveCompress(Blockchain &blockchain, size_t startIndex, size_t endIndex) {
    if (startIndex >= endIndex) {
        return;
    }

    // Compress the current set of blocks (for illustration, we concatenate block data)
    std::string compressedData;
    for (size_t i = startIndex; i < endIndex; ++i) {
        const Block &block = blockchain.getBlock(i);
        compressedData += block.getData(); // Add block's data to compressed string
    }

    // Store compressed data as a new "compressed" block or modify the last block
    blockchain.compressBlock(startIndex, compressedData);
    
    // Recursively compress further if needed
    size_t mid = (startIndex + endIndex) / 2;
    recursiveCompress(blockchain, startIndex, mid);
    recursiveCompress(blockchain, mid, endIndex);
}

// Compress the entire blockchain
void Compcrypt::compress(Blockchain &blockchain) {
    std::cout << "Performing recursive compression on blockchain..." << std::endl;

    // Start the recursive compression process on the full blockchain
    recursiveCompress(blockchain, 0, blockchain.getChainSize());
}

// Decompress the blockchain (for demonstration purposes)
void Compcrypt::decompress(Blockchain &blockchain) {
    std::cout << "Decompressing blockchain..." << std::endl;
    
    // For illustration purposes, we print the data (in practice, you'd rebuild blocks)
    for (size_t i = 0; i < blockchain.getChainSize(); ++i) {
        Block &block = blockchain.getBlock(i);
        std::cout << "Decompressed Block " << i << ": " << block.getData() << std::endl;
    }
}
